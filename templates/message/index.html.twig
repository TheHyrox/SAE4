{% extends 'base.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block sidebar %}
    <div class="d-flex flex-column h-100">
        {# New Message Button #}
        <button type="button" class="btn btn-light mb-3" data-bs-toggle="modal" data-bs-target="#newMessageModal">
            <i class="fas fa-edit"></i> Nouveau message
        </button>

        {# Recent Contacts List #}
        <div class="flex-grow-1 overflow-auto" style="color:black">
            {% set uniqueContacts = [] %}
            {% for message in messages %}
                {% set contact = message.sender.id == app.user.id ? message.recipient : message.sender %}
                {% if contact.id not in uniqueContacts|map(c => c.id) %}
                    {% set uniqueContacts = uniqueContacts|merge([contact]) %}
                    <div class="contact-item p-2 mb-2 bg-light rounded cursor-pointer" onclick="loadConversation({{ contact.id }})">
                        <div class="fw-bold">{{ contact.email }}</div>
                        <div class="small text-truncate">{{ contact.firstName }} {{ contact.name }}</div>
                        {% if contact.profession %}
                            <small class="text-muted">- {{ contact.profession.name }}</small>
                        {% endif %}
                    </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>

    {# New Message Modal #}
    <div class="modal fade" id="newMessageModal" tabindex="-1" aria-labelledby="newMessageModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="newMessageModalLabel" style="color: black;">Nouveau message</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3 search-container">
                        <input type="text" id="searchUser" class="form-control" placeholder="Rechercher par nom, prénom ou email...">
                        <div id="searchResults"></div>
                    </div>
                    <form id="newMessageForm" method="post" action="{{ path('app_messagerie_send') }}" class="d-none">
                        <input type="hidden" name="_token" value="{{ csrf_token('send-message') }}">
                        <input type="hidden" name="destinataire" id="selectedUserId" value="">
                        <div class="mb-3">
                            <label for="newMessageContent" class="form-label" style="color: black;">Message pour <span id="selectedUserName"></span></label>
                            <textarea name="content" id="newMessageContent" class="form-control" rows="3" required></textarea>
                        </div>
                        <div class="text-end">
                            <button type="submit" class="btn btn-primary">Envoyer</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body %}
    <div class="d-flex flex-column h-100">
        {# Chat Header #}
        <div class="chat-header px-3 pb-3 border-bottom">
            {% if selectedUser is defined and selectedUser %}
                <h5 class="m-0">
                    {{ selectedUser.firstName }} {{ selectedUser.name }}
                    <span class="text-muted">({{ selectedUser.email }})</span>
                    {% if selectedUser.profession %}
                        <small class="text-muted">- {{ selectedUser.profession.name }}</small>
                    {% endif %}
                </h5>
            {% else %}
                <h5 class="m-0 text-muted">Sélectionnez un contact pour démarrer une conversation</h5>
            {% endif %}
        </div>

        {# Messages Container #}
        <div class="flex-grow-1 overflow-auto p-3" id="messagesContainer">
            <div class="messages-wrapper">
                {% if selectedUser is defined and selectedUser and conversation|default([])|length == 0 %}
                    <div class="text-center text-muted my-5">
                        <p>Aucun message dans cette conversation.</p>
                        <p>Envoyez un message pour démarrer la conversation.</p>
                    </div>
                {% endif %}
                
                {% for message in conversation|default([]) %}
                    <div class="message-bubble mb-3 {% if message.sender.id == app.user.id %}sent{% else %}received{% endif %}" style="width: 40%; color: white">
                        <div class="message-content p-2 rounded" style="background-color: #659D31;">
                            {{ message.content|nl2br }}
                        </div>
                        <small class="text-muted">{{ message.sendDate|date('d-m-Y H:i:s', 'Europe/Paris') }}</small>
                    </div>
                {% endfor %}
            </div>
        </div>

        {# Message Input #}
        <div class="chat-input px-3 pt-3 border-top {% if selectedUser is not defined or not selectedUser %}d-none{% endif %}">
            <form method="post" action="{{ path('app_messagerie_send') }}" class="d-flex">
                <input type="hidden" name="_token" value="{{ csrf_token('send-message') }}">
                <input type="hidden" name="destinataire" value="{{ selectedUser.id|default('') }}">
                <input type="text" name="content" class="form-control me-2" placeholder="Votre message..." required>
                <button type="submit" class="btn" style="background-color: white; color:black">Envoyer</button>
            </form>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .cursor-pointer { cursor: pointer; }
        .message-bubble {
            max-width: 75%;
            margin: 8px 0;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        .message-bubble.sent {
            margin-left: auto;
        }
        .message-bubble.sent .message-content {
            background-color: #007bff;
            color: white;
        }
        .message-bubble.received .message-content {
            background-color: #f1f1f1;
        }
        .messages-wrapper {
            width: 100%;
            display: flex;
            flex-direction: column;
        }

        #messagesContainer {
            scrollbar-width: thin;
            scrollbar-color: rgba(0,0,0,.2) transparent;
            overflow-y: auto;
            overflow-x: hidden;
            height: calc(100vh - 220px); /* Adjust height to account for header and input */
            display: flex;
            flex-direction: column-reverse; /* This reverses the container so newest messages are at the bottom */
            position: relative;
        }

        .contact-item:hover {
            background-color: #e9ecef !important;
        }
        .contact-item.active {
            background-color: #cfe2ff !important;
            border-left: 3px solid #0d6efd;
        }
        .unread-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #0d6efd;
            display: inline-block;
            margin-right: 5px;
        }

        .search-container {
            position: relative;
        }

        #searchResults {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            z-index: 1050;
            max-height: 300px;
            overflow-y: auto;
            background: white;
            border: 1px solid #ddd;
            border-radius: 0 0 4px 4px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-top: -1px;
        }

        .search-item {
            padding: 10px 15px;
            border-bottom: 1px solid #f0f0f0;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .search-item:last-child {
            border-bottom: none;
        }

        .search-item:hover {
            background-color: #f8f9fa;
        }

        .search-item .avatar {
            font-size: 1.5rem;
            color: #6c757d;
            width: 32px;
            text-align: center;
        }

        .search-item .user-email {
            font-weight: 500;
            color: #212529;
        }

        .search-item .user-name {
            font-size: 0.875rem;
            color: #6c757d;
        }

        .search-item .profession {
            color: #6c757d;
            font-size: 0.8rem;
            font-style: italic;
        }

        .search-item .producer-badge {
            background-color: #198754;
            color: white;
            border-radius: 10px;
            padding: 1px 8px;
            font-size: 0.7rem;
            margin-left: 5px;
        }

        .search-item.loading,
        .search-item.no-results,
        .search-item.error {
            color: #6c757d;
            cursor: default;
            text-align: center;
            padding: 15px;
        }

        .search-item.error {
            color: #dc3545;
        }

        .selected-user {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 0;
        }

        .selected-user .avatar {
            font-size: 1.5rem;
            color: #6c757d;
            width: 32px;
            text-align: center;
        }

        .selected-user .user-email {
            font-weight: 500;
            color: #212529;
        }

        .selected-user .user-name {
            font-size: 0.875rem;
            color: #6c757d;
        }

        .selected-user .btn-close {
            font-size: 0.75rem;
            color: #6c757d;
            opacity: 0.7;
            transition: opacity 0.2s;
        }

        .selected-user .btn-close:hover {
            opacity: 1;
            color: #dc3545;
        }

        .search-container {
            position: relative;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements for search and messaging
            const searchUser = document.getElementById('searchUser');
            const searchContainer = document.querySelector('.search-container');
            const searchResults = document.getElementById('searchResults');
            const newMessageForm = document.getElementById('newMessageForm');
            const selectedUserId = document.getElementById('selectedUserId');
            const selectedUserName = document.getElementById('selectedUserName');
            
            // Create a container for the selected user display that will replace the search input
            const selectedUserDisplay = document.createElement('div');
            selectedUserDisplay.className = 'selected-user-display d-none';
            searchContainer.appendChild(selectedUserDisplay);
            
            // Debounce function to limit API calls
            function debounce(func, wait) {
                let timeout;
                return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), wait);
                };
            }

            // Perform search with debounce
            const performSearch = debounce(async (query) => {
                console.log("Performing search for:", query);
                
                if (query.length < 2) {
                    searchResults.innerHTML = '';
                    return;
                }
                
                searchResults.innerHTML = '<div class="search-item loading"><i class="fas fa-spinner fa-spin me-2"></i> Recherche en cours...</div>';
                
                try {
                    console.log("Fetching from:", `/api/users/search?q=${encodeURIComponent(query)}`);
                    const response = await fetch(`/api/users/search?q=${encodeURIComponent(query)}`);
                    
                    if (!response.ok) {
                        console.error("Response error:", response.status, response.statusText);
                        throw new Error(`Error ${response.status}: ${response.statusText}`);
                    }
                    
                    const users = await response.json();
                    console.log("Search results:", users);
                    
                    if (users.length === 0) {
                        searchResults.innerHTML = '<div class="search-item no-results">Aucun utilisateur trouvé</div>';
                        return;
                    }
                    
                    // Create results HTML with enhanced styling
                    searchResults.innerHTML = users.map(user => {
                        const escapedName = user.name ? user.name.replace(/"/g, '&quot;').replace(/'/g, '&#39;') : '';
                        const escapedFirstName = user.firstName ? user.firstName.replace(/"/g, '&quot;').replace(/'/g, '&#39;') : '';
                        const escapedEmail = user.email ? user.email.replace(/"/g, '&quot;').replace(/'/g, '&#39;') : '';
                        
                        return `
                            <div class="search-item" onclick="selectUser(${user.id}, '${escapedName}', '${escapedEmail}', '${escapedFirstName}')">
                                <div class="d-flex align-items-center">
                                    <div class="avatar me-2"><i class="fas fa-user-circle"></i></div>
                                    <div class="user-info">
                                        <div class="user-email">${escapedEmail}</div>
                                        <div class="user-name">
                                            ${escapedFirstName} ${escapedName}
                                            ${user.profession ? `<span class="profession">- ${user.profession.name}</span>` : ''}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                    }).join('');
                } catch (error) {
                    console.error('Error searching users:', error);
                    searchResults.innerHTML = '<div class="search-item error">Erreur lors de la recherche: ' + error.message + '</div>';
                }
            }, 300);

            // Only add the listener once, during initialization
            if (searchUser) {
                searchUser.addEventListener('input', (e) => {
                    performSearch(e.target.value.trim());
                });
            } else {
                console.error("Search input element not found!");
            }

            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (searchResults && !searchUser?.contains(e.target) && !searchResults.contains(e.target)) {
                    searchResults.innerHTML = '';
                }
            });

            // Function to clear the selected user
            function clearSelectedUser() {
                selectedUserId.value = '';
                selectedUserDisplay.classList.add('d-none');
                searchUser.classList.remove('d-none');
                newMessageForm.classList.add('d-none');
                searchUser.value = '';
                searchUser.focus();
            }

            // Define selectUser globally so it can be called from onclick
            window.selectUser = function(id, name, email, firstName = '') {
                if (selectedUserId && selectedUserName && newMessageForm) {
                    selectedUserId.value = id;
                    const displayName = firstName ? `${firstName} ${name}` : name;
                    selectedUserName.textContent = `${displayName} (${email})`;
                    
                    // Create the selected user display
                    selectedUserDisplay.innerHTML = `
                        <div class="selected-user p-2 d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center">
                                <div class="avatar me-2"><i class="fas fa-user-circle"></i></div>
                                <div class="user-info">
                                    <div class="user-email">${email}</div>
                                    <div class="user-name">${displayName}</div>
                                </div>
                            </div>
                            <button type="button" class="btn-close btn-sm" aria-label="Changer d'utilisateur"></button>
                        </div>
                    `;
                    
                    // Hide search input, show selected user display
                    searchUser.classList.add('d-none');
                    selectedUserDisplay.classList.remove('d-none');
                    
                    // Add event listener to the clear button
                    const clearBtn = selectedUserDisplay.querySelector('.btn-close');
                    clearBtn.addEventListener('click', clearSelectedUser);
                    
                    // Show the message form
                    newMessageForm.classList.remove('d-none');
                    searchResults.innerHTML = '';
                    
                    // Focus on the message textarea
                    document.getElementById('newMessageContent').focus();
                } else {
                    console.error("Form elements not found!");
                }
            };

            // Function to load conversation
            window.loadConversation = function(userId) {
                window.location.href = `/messagerie/${userId}`;
            };

            // Scrolling functionality for messages
            function scrollMessagesToBottom() {
                const messagesContainer = document.getElementById('messagesContainer');
                if (messagesContainer) {
                    const scrollHeight = messagesContainer.scrollHeight;
                    messagesContainer.scrollTop = scrollHeight;
                    
                    if (messagesContainer.scrollTop !== scrollHeight) {
                        setTimeout(() => {
                            messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        }, 50);
                    }
                }
            }
            
            scrollMessagesToBottom();
            window.addEventListener('load', scrollMessagesToBottom);
            setTimeout(scrollMessagesToBottom, 500);
            window.addEventListener('resize', scrollMessagesToBottom);
            
            // Highlight active contact
            const userId = window.location.pathname.split('/').pop();
            if (userId && !isNaN(userId)) {
                const contactItems = document.querySelectorAll('.contact-item');
                contactItems.forEach(item => {
                    const onclickAttr = item.getAttribute('onclick');
                    if (onclickAttr && onclickAttr.includes(userId)) {
                        item.classList.add('active');
                    }
                });
            }

            // Listen for modal show event to prepare search
            const newMessageModal = document.getElementById('newMessageModal');
            if (newMessageModal) {
                newMessageModal.addEventListener('shown.bs.modal', function () {
                    clearSelectedUser();
                });
            }
        });
    </script>
{% endblock %}