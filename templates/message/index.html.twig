{% extends 'base.html.twig' %}

{% block title %}Messagerie{% endblock %}

{% block sidebar %}
    <div class="d-flex flex-column h-100">
        {# New Message Button #}
        <button type="button" class="btn btn-light mb-3" data-bs-toggle="modal" data-bs-target="#newMessageModal">
            <i class="fas fa-edit"></i> Nouveau message
        </button>

        {# Recent Contacts List #}
        <div class="flex-grow-1 overflow-auto" style="color:black">
            {% set uniqueContacts = [] %}
            {% for message in messages %}
                {% set contact = message.sender.id == app.user.id ? message.recipient : message.sender %}
                {% if contact.id not in uniqueContacts|map(c => c.id) %}
                    {% set uniqueContacts = uniqueContacts|merge([contact]) %}
                    <div class="contact-item p-2 mb-2 bg-light rounded cursor-pointer" onclick="loadConversation({{ contact.id }})">
                        <div class="fw-bold">{{ contact.email }}</div>
                        <div class="small text-truncate">{{ contact.firstName }} {{ contact.name }}</div>
                        {% if contact.profession %}
                            <small class="text-muted">- {{ contact.profession.name }}</small>
                        {% endif %}
                    </div>
                {% endif %}
            {% endfor %}
        </div>
    </div>

    {# New Message Modal #}
    <div class="modal fade" id="newMessageModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nouveau message</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <input type="text" id="searchUser" class="form-control" placeholder="Rechercher un utilisateur...">
                        <div id="searchResults" class="mt-2"></div>
                    </div>
                    <form id="newMessageForm" method="post" action="{{ path('app_messagerie_send') }}" class="d-none">
                        <input type="hidden" name="_token" value="{{ csrf_token('send-message') }}">
                        <input type="hidden" name="destinataire" id="selectedUserId" value="">
                        <div class="mb-3">
                            <label for="newMessageContent" class="form-label">Message pour <span id="selectedUserName"></span></label>
                            <textarea name="content" id="newMessageContent" class="form-control" rows="3" required></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Envoyer</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block body %}
    <div class="d-flex flex-column h-100">
        {# Chat Header #}
        <div class="chat-header px-3 pb-3 border-bottom">
            {% if selectedUser is defined and selectedUser %}
                <h5 class="m-0">
                    {{ selectedUser.firstName }} {{ selectedUser.name }}
                    <span class="text-muted">({{ selectedUser.email }})</span>
                    {% if selectedUser.profession %}
                        <small class="text-muted">- {{ selectedUser.profession.name }}</small>
                    {% endif %}
                </h5>
            {% else %}
                <h5 class="m-0 text-muted">Sélectionnez un contact pour démarrer une conversation</h5>
            {% endif %}
        </div>

        {# Messages Container #}
        <div class="flex-grow-1 overflow-auto p-3" id="messagesContainer" style="height: calc(100vh - 180px);">
            {% for message in conversation|default([]) %}
                <div class="message-bubble mb-3 {% if message.sender.id == app.user.id %}sent{% else %}received{% endif %}">
                    <div class="message-content p-2 rounded">
                        {{ message.content|nl2br }}
                    </div>
                    <small class="text-muted">{{ message.sendDate|date('d/m/Y H:i') }}</small>
                </div>
            {% else %}
                {% if selectedUser is defined and selectedUser %}
                    <div class="text-center text-muted my-5">
                        <p>Aucun message dans cette conversation.</p>
                        <p>Envoyez un message pour démarrer la conversation.</p>
                    </div>
                {% endif %}
            {% endfor %}
        </div>

        {# Message Input #}
        <div class="chat-input px-3 pt-3 border-top {% if selectedUser is not defined or not selectedUser %}d-none{% endif %}">
            <form method="post" action="{{ path('app_messagerie_send') }}" class="d-flex">
                <input type="hidden" name="_token" value="{{ csrf_token('send-message') }}">
                <input type="hidden" name="destinataire" value="{{ selectedUser.id|default('') }}">
                <input type="text" name="content" class="form-control me-2" placeholder="Votre message..." required>
                <button type="submit" class="btn" style="background-color: white; color:black">Envoyer</button>
            </form>
        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .cursor-pointer { cursor: pointer; }
        .message-bubble {
            max-width: 75%;
            margin: 8px 0;
        }
        .message-bubble.sent {
            margin-left: auto;
        }
        .message-bubble.sent .message-content {
            background-color: #007bff;
            color: white;
        }
        .message-bubble.received .message-content {
            background-color: #f1f1f1;
        }
        #messagesContainer {
            scrollbar-width: thin;
            scrollbar-color: rgba(0,0,0,.2) transparent;
        }
        .contact-item:hover {
            background-color: #e9ecef !important;
        }
        .contact-item.active {
            background-color: #cfe2ff !important;
            border-left: 3px solid #0d6efd;
        }
        .unread-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background-color: #0d6efd;
            display: inline-block;
            margin-right: 5px;
        }
    </style>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Add user search functionality
        const searchUser = document.getElementById('searchUser');
        const searchResults = document.getElementById('searchResults');
        const newMessageForm = document.getElementById('newMessageForm');
        const selectedUserId = document.getElementById('selectedUserId');
        const selectedUserName = document.getElementById('selectedUserName');
        
        searchUser.addEventListener('input', async (e) => {
            if (e.target.value.length < 2) {
                searchResults.innerHTML = '';
                newMessageForm.classList.add('d-none');
                return;
            }
            
            try {
                const response = await fetch(`/api/users/search?q=${e.target.value}`);
                const users = await response.json();
                
                if (users.length === 0) {
                    searchResults.innerHTML = '<div class="p-2 text-muted">Aucun utilisateur trouvé</div>';
                    newMessageForm.classList.add('d-none');
                    return;
                }
                
                searchResults.innerHTML = users.map(user => `
                    <div class="p-2 border-bottom cursor-pointer" onclick="selectUser(${user.id}, '${user.name}', '${user.email}')">
                        <div>${user.email}</div>
                        <small>${user.name} ${user.isProducer ? '- Producteur' : ''}</small>
                    </div>
                `).join('');
            } catch (error) {
                console.error('Error searching users:', error);
                searchResults.innerHTML = '<div class="p-2 text-danger">Erreur lors de la recherche</div>';
            }
        });
        
        function selectUser(id, name, email) {
            selectedUserId.value = id;
            selectedUserName.textContent = `${name} (${email})`;
            newMessageForm.classList.remove('d-none');
            searchResults.innerHTML = '';
            searchUser.value = '';
        }
        
        // Function to load conversation
        function loadConversation(userId) {
            window.location.href = `/messagerie/${userId}`;
        }

        // Auto-scroll to bottom of messages
        const messagesContainer = document.getElementById('messagesContainer');
        if (messagesContainer) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        // Highlight active contact
        document.addEventListener('DOMContentLoaded', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const userId = window.location.pathname.split('/').pop();
            
            if (userId && !isNaN(userId)) {
                const contactItems = document.querySelectorAll('.contact-item');
                contactItems.forEach(item => {
                    if (item.getAttribute('onclick').includes(userId)) {
                        item.classList.add('active');
                    }
                });
            }
        });
    </script>
{% endblock %}